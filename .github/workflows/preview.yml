# PR Preview workflow for building and deploying Storybook previews
name: PR Preview

on:
  pull_request:
    types: [opened, synchronize]
    # Only run on PRs that might affect components
    paths:
      - "lib/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - ".storybook/**"
      - "vite.config.ts"

jobs:
  build-storybook:
    name: Build and Deploy Storybook Preview
    runs-on: ubuntu-latest
    # Skip running on dependabot PRs
    if: github.actor != 'dependabot[bot]'
    permissions:
      id-token: write # Required for deploy-pages action
      contents: read # For checkout
      pull-requests: write # For commenting on PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Fix: Install pnpm before Node.js setup
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      # Verify pnpm installation
      - name: Verify pnpm installation
        run: |
          pnpm --version
          which pnpm
          echo $PATH

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"

      - name: Install dependencies
        run: |
          # Try with frozen lockfile first, but fall back to regular install if that fails
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Build Storybook
        run: pnpm build:storybook

      # You can use any static site hosting service you prefer
      # This example uses GitHub Pages via actions/deploy-pages
      - name: Upload Storybook artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: storybook-static

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          preview: true

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const url = "${{ steps.deployment.outputs.page_url }}";
            const prNumber = context.issue.number;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const botComment = comments.find(comment => {
              return comment.user.login === 'github-actions[bot]' && 
                     comment.body.includes('Storybook Preview');
            });

            const body = `## Storybook Preview

            :rocket: Your Storybook preview is ready for this PR!

            :link: [View Storybook Preview](${url})

            _This preview will update automatically as you make changes._`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }
