# CI workflow for testing, linting, and building
name: CI

on:
  push:
    branches: [development, main]
    # Don't trigger on tags created by the release workflow
    tags-ignore:
      - "v*"
  pull_request:
    # Run on all PRs, especially those targeting development and main
    branches: ["**"]

jobs:
  validate:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Fix: Install pnpm with proper setup
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      # Verify pnpm installation
      - name: Verify pnpm installation
        run: |
          pnpm --version
          which pnpm
          echo $PATH

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"

      - name: Install dependencies
        run: |
          # Try with frozen lockfile first, but fall back to regular install if that fails
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm tsc --noEmit

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Fix: Install pnpm with proper setup
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      # Verify pnpm installation
      - name: Verify pnpm installation
        run: |
          pnpm --version
          which pnpm
          echo $PATH

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"

      - name: Install dependencies
        run: |
          # Try with frozen lockfile first, but fall back to regular install if that fails
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Unit & Component Tests
        run: pnpm test:ci

      - name: Cache Playwright binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Integration/E2E Tests
        run: |
          pnpm exec playwright install --with-deps
          pnpm exec playwright test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          if-no-files-found: ignore

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Fix: Install pnpm with proper setup
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      # Verify pnpm installation
      - name: Verify pnpm installation
        run: |
          pnpm --version
          which pnpm
          echo $PATH

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"

      - name: Install dependencies
        run: |
          # Try with frozen lockfile first, but fall back to regular install if that fails
          pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Build package
        run: pnpm build:package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7
