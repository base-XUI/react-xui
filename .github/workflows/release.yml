# Release workflow for versioning and publishing to npm
name: Release

on:
  push:
    branches:
      - main
      - "hotfix/*"

jobs:
  release:
    name: Release Process
    runs-on: ubuntu-latest
    permissions:
      # For creating releases, tags, etc
      contents: write
      # For npm provenance
      id-token: write
      # For PR comments
      pull-requests: write
      # For issue comments
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Full history for proper versioning with changesets
          fetch-depth: 0
          # This is required for the changesets action to push to the repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Verify pnpm installation
        run: pnpm --version

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build package
        run: pnpm build:package

      # Handle release strategy based on branch
      - name: Process Release
        id: release-info
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch: $BRANCH_NAME"

          if [[ $BRANCH_NAME == "main" ]]; then
            if [[ $HAS_CHANGESETS == "true" ]]; then
              echo "PUBLISH_COMMAND=pnpm version-packages && pnpm build:package && pnpm changeset publish" >> $GITHUB_OUTPUT
            else
              echo "PUBLISH_COMMAND=pnpm build:package && pnpm changeset publish" >> $GITHUB_OUTPUT
            fi
            echo "IS_MAIN=true" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME == hotfix/* ]]; then
            echo "Running on hotfix branch"
            if [[ $HAS_CHANGESETS == "true" ]]; then
              echo "PUBLISH_COMMAND=pnpm version-packages && pnpm build:package && pnpm changeset publish" >> $GITHUB_OUTPUT
            else
              echo "PUBLISH_COMMAND=pnpm build:package && pnpm changeset publish" >> $GITHUB_OUTPUT
            fi
            echo "IS_MAIN=false" >> $GITHUB_OUTPUT
          else
            echo "Not a publishing branch"
            exit 0
          fi

      # Main branch: Apply changesets and publish directly
      - name: Release on main branch
        if: steps.release-info.outputs.IS_MAIN == 'true'
        uses: changesets/action@v1
        with:
          publish: ${{ steps.release-info.outputs.PUBLISH_COMMAND }}
          commit: "chore: version packages"
          title: "chore: version packages"
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Hotfix branches: Direct publish
      - name: Release on hotfix branch
        if: steps.release-info.outputs.IS_MAIN != 'true'
        run: ${{ steps.release-info.outputs.PUBLISH_COMMAND }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Create GitHub release for tags
      - name: Create GitHub Release
        if: steps.release-info.outputs.IS_MAIN != 'true' && success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const version = packageJson.version;

            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `v${version}`,
              body: `Release v${version}. See CHANGELOG.md for details.`,
              draft: false,
              prerelease: version.includes('-')
            });

            console.log(`Created release: ${data.html_url}`);

      - name: Release status
        if: success()
        run: |
          echo "âœ… Package was successfully published!"
          echo "ðŸ“¦ Version: $(node -p "require('./package.json').version")"
